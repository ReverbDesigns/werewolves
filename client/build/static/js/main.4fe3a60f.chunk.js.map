{"version":3,"sources":["components/MainPage/WaitingRoom/DisplayPlayerNames/DisplayPlayerNames.js","components/MainPage/WaitingRoom/DisplayChosenCards/DisplayChosenCards.js","components/MainPage/WaitingRoom/WaitingRoom.js","components/MainPage/InGameRoom/RenderBasedOnRoles/BearLeader/BearLeader.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Cupid/Cupid.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Seer/Seer.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheFox/TheFox.js","components/MainPage/InGameRoom/RenderBasedOnRoles/ThePiedPiper/ThePiedPiper.js","components/MainPage/InGameRoom/RenderBasedOnRoles/TheSavior/TheSavior.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Werewolves/Werewolves.js","components/MainPage/InGameRoom/RenderBasedOnRoles/Witch/Witch.js","components/MainPage/InGameRoom/RenderBasedOnRoles/RoundEnd/RoundEnd.js","components/MainPage/InGameRoom/InGameRoom.js","components/Welcome/Welcome.js","validation/currentRoles/currentRoles.js","serverUrl.js","components/Login/Login.js","components/Footer/Footer.js","components/MainPage/WaitingRoom/DisplayCards/DisplayCards.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["DisplayPlayerNamesSocket","GetCurrentRolesSocket","GetAdminSocket","StartGameSocket","firstRoundSocket","bearSocket","calledTurnSocket","getPlayerSocket","getNextTurnSocket","cupidSocket","seerSocket","foxSocket","piperSocket","getCharmedSocket","saviorSocket","otherSocket","witchSocket","timer","minute","second","roundEndSocket","votingRoundSocket","votedHangedPlayerSocket","InGameSocket","adminSocket","roundEndsSocket","Welcome","state","playButton","props","history","push","prevProps","prevState","className","target","href","onClick","this","Component","currentRoles","serverUrl","uniqid","require","axios","Login","newRoomButton","roomid","input_player_username_node","document","getElementById","value","length","placeholder","method","url","data","username","then","res","catch","err","console","log","joinButton","input_player_roomid_node","type","id","name","Footer","DisplayPlayerNames","_isMounted","renderPlayerNames","socketIOClient","on","emit","setState","map","player","key","DisplayCards","renderCards","renderPressedCards","isCardSelected","selectedCards","pressedCards","decreaseCardBttn","e","innerText","name_array","value_array","hasOwnProperty","forEach","index","quantityId","chooseCardBttn","submitCardsBttn","sentData","socket","card","cardId","bind","k","DisplayChosenCards","renderChosenCards","cards","Header","ChooseUserTab","classList","remove","add","ChooseCardCollectionTab","ChooseFinalTab","WaitingRoom","admin","numberOfPlayers","ifStartGame","renderDisplayCardTabWhetherPlayerIsAdmin","renderStartButtonIfAdmin","startGameBttn","match","params","query","disconnect","bear_target_bttn_ids","players","BearLeader","renderUI","renderPlayers","endTurnConfirm","renderScentTargetNeighbor","renderLovers","renderCharmedPlayers","scentTarget","receiveTurn","PlayerToScent","playersToScent","window","confirm","sendingData","endTurnBttn","role","cupid_target_bttn_ids","playersToConnect","Cupid","renderTargetConnection","bttnId","disabled","canUse","seer_target_bttn_ids","Seer","renderTargetRole","playerToRevealBttn","the_fox_target_bttn_ids","playersToReveal_arr","TheFox","playersToRevealBttn","piper_target_bttn_ids","playersToCharm","ThePiedPiper","PlayersToCharm","protectTarget","lastProtectedPlayer","TheSavior","isDead","isSilence","renderSaviorAction","ProtectPlayer","otherWolves","targetChoice","falseRole_arr","target_button_id_arr","Werewolves","renderOtherChoices","choseTarget","renderFinalTarget","renderOwnTarget","renderFalsePickingPhase","didChooseFalseRole","false_role_button_id_arr","false_role_werewolf_id_arr","chooseTargetBttn","wolfName","AgreeOnKill","werewolf","chooseFalseRole","falseRole","Array","every","numberOfWerewolves","otherFalseRoles_arr","werewolvesId","domButton","domName","otherFalseRole","werewolvesIconId","playerHolderId","wolfNode","isContainWolfName","wolf","choice","protectId_buttons","killId_buttons","Witch","renderWitchAction","KillPlayerBttn","target_kill","ProtectPlayerBttn","target_protect","UIEndTurnBttn","leftAbilities","killId","protectId","useKill","useHeal","setUpTime","chosenPlayer","round_end_target_bttn_id_arr","RoundEnd","renderChosenExecutedPlayer","renderFinalExecutedPlayer","endRoundConfirm","timerEnds","renderVotePlayerButton","VotePlayer","style","display","ChoosePlayer","EndRound","roundEndPlayerId","setInterval","clearInterval","Math","floor","playersGetHang","InGameRoom","renderPlayerRole","renderRoleUI","renderStartBttn","startBttnClicked","isAdmin","roundEnds","gameEnds","sideWon","startBttn","CloseTheGame","ChooseLeftTab","ChooseMiddleTab","ChooseRightTab","location","row","found","special","info","dead","death","i","App","Route","exact","path","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","BrowserRouter","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fe3a60f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport \"./DisplayPlayerNames.css\"\n\nimport serverUrl from '../../../../serverUrl'\n\nlet DisplayPlayerNamesSocket\n\nclass DisplayPlayerNames extends Component{\n    _isMounted = false\n\n    state = {\n        renderPlayerNames: null\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        DisplayPlayerNamesSocket = socketIOClient(serverUrl + 'main-page')\n        DisplayPlayerNamesSocket.on('connect', () => {\n            DisplayPlayerNamesSocket.emit('RequestToGetPlayersAndJoinRoom', this.props.roomid)\n        })\n\n        DisplayPlayerNamesSocket.on('GetBroadCastPlayers', data => \n        {\n            if(this._isMounted)\n                this.setState({renderPlayerNames: data.map(player => {return(<div key = {player} className=\"player-name-holder\"><p>{player}</p></div>)})})\n        })\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n    }\n\n    render(){\n        return(\n            <>\n                {this.state.renderPlayerNames}\n            </>\n        )\n    }\n}\n\n\nexport {DisplayPlayerNames, DisplayPlayerNamesSocket}","import React, { Component } from 'react'\n\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../serverUrl'\n\nimport './DisplayChosenCards.css'\n\nlet GetCurrentRolesSocket\n\nclass DisplayChosenCards extends Component{\n    _isMounted = false\n\n    state = {\n        renderChosenCards: null\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n            GetCurrentRolesSocket = socketIOClient(serverUrl + 'get-current-roles')\n        \n            GetCurrentRolesSocket.on('connect', () => {\n                GetCurrentRolesSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            GetCurrentRolesSocket.on('GetSelectedCards', data => {\n                if(data !== null){\n                    let cards = []\n\n                    for(var key in data){\n                        if(data.hasOwnProperty(key)){\n                            if(data[key] > 0)\n                                cards.push(key + ' x' + data[key])\n                        }\n                    }\n                    this.setState({\n                        renderChosenCards: cards.map((data, index) => {\n                            let key = 'chosen-roles-' + index\n                            return(\n                                <div key={key} className=\"chosen-card-container\">\n                                    <p>{data}</p>\n                                </div>\n                            )\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"display-chosen-cards\">\n                {this.state.renderChosenCards}\n            </div>\n                \n            </>\n        )\n    }\n}\n\nexport {DisplayChosenCards, GetCurrentRolesSocket}","import React, { Component } from 'react'\n\nimport {DisplayPlayerNames, DisplayPlayerNamesSocket} from './DisplayPlayerNames/DisplayPlayerNames'\nimport DisplayCards from './DisplayCards/DisplayCards'\nimport {DisplayChosenCards, GetCurrentRolesSocket} from './DisplayChosenCards/DisplayChosenCards'\n\nimport Header from '../../Header/Header'\nimport socketIOClient from 'socket.io-client'\nimport serverUrl from '../../../serverUrl'\nimport \"./WaitingRoom.css\"\n\n\nlet GetAdminSocket,\n    StartGameSocket\n\nclass WaitingRoom extends Component{\n    _isMounted = false\n\n    state = {\n        admin: \"\",\n        numberOfPlayers: 0,\n        ifStartGame: false,\n        renderDisplayCardTabWhetherPlayerIsAdmin: null,\n        renderStartButtonIfAdmin: null\n    }\n\n    startGameBttn = (e) => {\n        StartGameSocket.emit('start', this.props.match.params.roomid)\n\n        this.setState({\n            renderStartButtonIfAdmin: null\n        })\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            //Display header\n            document.getElementById(\"header\").classList.remove(\"hide-header\")\n\n            //Socket to get admin of the room\n            GetAdminSocket = socketIOClient(serverUrl +'get-admin', {\n                query: {\n                    roomid: this.props.match.params.roomid\n                }\n            })\n\n            GetAdminSocket.on('connect', () => {\n                GetAdminSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            GetAdminSocket.on('GetAdmin', data => {\n                this.setState({\n                    admin: data.admin,\n                    numberOfPlayers: data.numberOfPlayers\n                })\n    \n                if(this.props.match.params.username === data.admin){\n                    this.setState({\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <DisplayCards roomid = {this.props.match.params.roomid}\n                                                                        admin = {this.state.admin}\n                                                                        username = {this.props.match.params.username}\n                                                                    />,\n                        renderStartButtonIfAdmin:   <div className=\"start-button-container\">\n                                                        <button type='button' onClick={this.startGameBttn}>Start</button>\n                                                    </div>\n                                                                    \n                    })\n                }\n                else{\n                    this.setState({\n                        renderDisplayCardTabWhetherPlayerIsAdmin: <>\n                                                                <div className = \"display-chosen-cards-section\" id=\"display-cards-container\">\n                                                                    <div className = \"title-of-chosen-cards-tab\">\n                                                                        <h4>Card Collection</h4>\n                                                                    </div>\n                                                                    <DisplayChosenCards roomid = {this.props.match.params.roomid} />\n                                                                </div>\n                                                                </>\n                    })\n                }\n            })\n            \n            StartGameSocket = socketIOClient(serverUrl + 'start-game')\n\n            StartGameSocket.on('connect', () => {\n                StartGameSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n            \n            StartGameSocket.on('RedirectToGameRoom', data => {\n                if(data === \"ok\")\n                    this.props.history.push('/in-game-room/' + this.props.match.params.roomid + '/' + this.props.match.params.username)\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        GetAdminSocket.disconnect()\n        StartGameSocket.disconnect()\n        DisplayPlayerNamesSocket.disconnect()\n        if(GetCurrentRolesSocket)\n            GetCurrentRolesSocket.disconnect()\n    }\n    \n    componentDidUpdate(prevProps, prevState){\n    }\n\n    render(){\n        return(\n            <>\n            <Header />\n\n            <div className=\"waiting-room-container\">\n                <div className=\"waiting-room-title\">\n                    <h2>Waiting Room</h2>\n                </div>\n                \n                \n                <div className=\"waiting-room-main-data-container\" >\n                \n                    {this.state.renderDisplayCardTabWhetherPlayerIsAdmin}\n\n                    <div className = \"room-information-container\" id=\"room-information-container\">\n                        <div className= \"room-id-and-number-of-players-container\">\n                            <p>Room ID: {this.props.match.params.roomid} </p>\n                            {/* <p>No. of Players: {this.state.numberOfPlayers} </p> */}\n                            <p>Admin: {this.state.admin}</p>\n                            <p>Name: {this.props.match.params.username}</p>\n                        </div>\n\n                        <div className = \"display-player-names-container\">\n                            <DisplayPlayerNames roomid = {this.props.match.params.roomid} />\n                        </div>\n\n                        {this.state.renderStartButtonIfAdmin}\n                    </div>\n                </div>\n            </div>\n            </>\n        ) \n    }\n}\n\nexport {WaitingRoom, GetAdminSocket, StartGameSocket}","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nlet bear_target_bttn_ids = [],\n    players = [],\n    firstRoundSocket,\n    bearSocket,\n    calledTurnSocket,\n    getPlayerSocket,\n    getNextTurnSocket\n\nclass BearLeader extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        endTurnConfirm: null,\n        renderScentTargetNeighbor: null,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        scentTarget: null,\n        receiveTurn: false\n    }\n\n    PlayerToScent = (name, index, e) => {\n        let playersToScent = []\n        if(index >= 1 && index < players.length - 1){\n            playersToScent.push(players[index-1])\n            playersToScent.push(players[index+1])\n        }\n\n        else if (index === 0){\n            playersToScent.push(players[index + 1])\n        }\n\n        else if(index === players.length - 1){\n            playersToScent.push(players[index - 1])\n        }\n\n        if(window.confirm(\"Do you want to scent \" + name +\"?\")){\n            let sendingData = {\n                roomid: this.props.roomid,\n                playersToScent: playersToScent\n            }\n            bearSocket.emit('RequestToScentPlayer', sendingData)\n\n\n            this.setState({scentTarget : name})\n            players.length = 0\n        }\n    }\n\n    endTurnBttn = () => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'The bear leader'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n    }  \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n            \n            bear_target_bttn_ids.length = 0\n\n            bearSocket = socketIOClient(serverUrl + 'bear')\n\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                            <p>Who do you want to scent its neighbor?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                            <p>Who do you want to scent its neighbor?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            //Bear's action\n            bearSocket.on('ScentPlayer', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                this.setState({\n                    renderScentTargetNeighbor: <p>{data ? <>Werewolve(s) exists around <b>{this.state.scentTarget}</b></> : <>There is none of Werewolves around <b>{this.state.scentTarget}</b></>}</p>,\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                })\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        \n        players.length = 0\n        bear_target_bttn_ids.length = 0\n\n        firstRoundSocket.disconnect()\n        bearSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n        getNextTurnSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            bear_target_bttn_ids.length = 0\n            players.length = 0\n\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        players.push(player)\n\n                        let id = \"bear_target_bttn_\" + index\n\n                        bear_target_bttn_ids.push(id)\n\n                        return(\n                            <button key = {player} id={id} type=\"button\" onClick={this.PlayerToScent.bind(this, player, index)}>{player}</button>\n                        )\n                    })\n                })\n            })\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                {this.state.renderScentTargetNeighbor}\n                {this.state.endTurnConfirm}\n            </div>  \n            </>\n        )\n    }\n}   \n\nexport default BearLeader","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nimport \"./Cupid.css\"\n\nlet cupid_target_bttn_ids = [],\n    playersToConnect = [],\n    firstRoundSocket,\n    cupidSocket,\n    calledTurnSocket,\n    getNextTurnSocket,\n    getPlayerSocket\n\nclass Cupid extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        renderTargetConnection: null,\n        endTurnConfirm: null,\n        renderLovers: null,\n        renderCharmedPlayers: null\n    }\n\n    playersToConnect = (name, index, bttnId, e) => {\n        if(window.confirm(\"Do you want to choose \" + name + \"?\")){\n            playersToConnect.push(name)\n\n            document.getElementById(bttnId).disabled = true\n            document.getElementById(bttnId).classList.remove(\"grayder-background\")\n            document.getElementById(bttnId).classList.add(\"grayder-background\")\n\n            if(playersToConnect.length === 2){\n                // const socket = socketIOClient(serverUrl + 'cupid')\n\n                let sendingData = {\n                    roomid: this.props.roomid,\n                    playersToConnect: playersToConnect\n                }\n\n                cupidSocket.emit('RequestToConnectPlayers', sendingData)\n\n                playersToConnect.length = 0\n            }\n        }\n    }\n\n    endTurnBttn = () => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'Cupid'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n    }  \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted) {\n            \n            //need to set up the socket first, because the when making direct socket to server, server will only response to the received socket\n            //meaning socket in an onclick function will get response it that scope, the response will not be received in the socket in componentDidMount\n            cupidSocket = socketIOClient(serverUrl + 'cupid')\n\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\n                }\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    cupidSocket.emit('RequestToGetCupidAbility', this.props.roomid)\n                }\n            })\n\n            //Cupid's action\n            cupidSocket.on('CanUseAbility', canUse => {\n                if(canUse){\n                    this.setState({\n                        renderUI: <>\n                                <p>Who do you want to connect?</p>\n                        </>\n                    })\n\n                    // to display all the players that are from the room (every character must have)\n                    getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n                    getPlayerSocket.on('connect', () => {\n                        getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                        getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n                    })\n\n                    getPlayerSocket.on('GetPlayers', data => {\n                        this.setState({\n                            renderPlayers: data.map((player, index) => {\n                                if(player !== this.props.username){\n                                    let id = \"cupid_target_bttn_\" + index\n            \n                                    cupid_target_bttn_ids.push(id)\n            \n                                    return(\n                                        <button key = {player} id={id} type=\"button\" onClick={this.playersToConnect.bind(this, player, index, id)}>{player}</button>\n                                    )\n                                }\n\n                                return ''\n                            })\n                        })\n                    })\n                }\n\n                else{\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                    this.setState({\n                        renderTargetConnection: <p>You've finished your task, press End Turn.</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n\n            cupidSocket.on('ConnectedPlayers', (data) => {\n                playersToConnect = data\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                this.setState({\n                    renderTargetConnection: <p><b>{playersToConnect[0].player}</b> is now connected with <b>{playersToConnect[1].player}</b></p>,\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                })\n            })\n        }\n\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        playersToConnect.length = 0\n\n        firstRoundSocket.disconnect()\n        cupidSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                    {this.state.renderTargetConnection}\n                    {this.state.endTurnConfirm}\n            </div>  \n            </>\n        )\n    }\n}   \n\nexport default Cupid","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nlet seer_target_bttn_ids = [],\n    calledTurnSocket,\n    firstRoundSocket,\n    seerSocket,\n    getNextTurnSocket,\n    getPlayerSocket\n\nclass Seer extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        renderTargetRole: null,\n        endTurnConfirm: null,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        receiveTurn: false\n    }\n\n    playerToRevealBttn = (name, bttnId, e) => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            player: name\n        }\n\n        if(window.confirm(\"Do you want to view \" + name + \"'s card?\")){\n            seerSocket.emit('Request', sendingData)\n\n            seer_target_bttn_ids.forEach((bttnId, index) => {\n                if(document.getElementById(bttnId))\n                    document.getElementById(bttnId).disabled = true\n            })\n        }\n    }\n\n    endTurnBttn = () => {\n        \n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'Seer/ Fortune Teller'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n\n        this.setState({endTurnConfirm: null})\n    }   \n\n    componentDidMount(){\n        this._isMounted = true\n        \n\n        if(this._isMounted){\n            \n            seer_target_bttn_ids.length = 0\n\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    //render UI\n                    this.setState({\n                        renderUI: <>\n                                <p>Who do you want to reveal?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n            \n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    //render UI\n                    this.setState({\n                        renderUI: <>\n                                <p>Who do you want to reveal?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            seerSocket = socketIOClient(serverUrl + 'seer')\n\n            //Seer's action\n            seerSocket.on('RevealPlayer', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                this.setState({\n                    renderTargetRole: <p><b>{data.username}</b>'s role is: <b>{data.role}</b></p>,\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                })\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        seer_target_bttn_ids.length = 0\n\n        calledTurnSocket.disconnect()\n        firstRoundSocket.disconnect()\n        seerSocket.disconnect()\n        getNextTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n        \n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            seer_target_bttn_ids.length = 0\n\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        if(player !== this.props.username){\n                            let id = \"seer_target_bttn_\" + index\n    \n                            seer_target_bttn_ids.push(id)\n    \n                            return(\n                                <button key = {player} id={id} type=\"button\" onClick={this.playerToRevealBttn.bind(this, player, id)}>{player}</button>\n                            )\n                        }\n\n                        return ''\n                    })\n                })\n            })\n        }\n    }\n    \n    render(){\n        return(\n            <>\n                <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                    <div className=\"in-game-render-ui-container\">\n                        {this.state.renderUI}\n                    </div>\n                    \n                    <div className=\"in-game-render-players-container\">\n                        {this.state.renderPlayers}\n                    </div>\n\n                </div>\n\n                <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                    {this.state.renderTargetRole}\n                    {this.state.endTurnConfirm}\n                </div>  \n            </>\n        )\n    }\n}   \n\nexport default Seer","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nimport './TheFox.css'\n\nlet the_fox_target_bttn_ids = [],\n    players = [],\n    playersToReveal_arr = [],\n    foxSocket,\n    getNextTurnSocket,\n    firstRoundSocket,\n    calledTurnSocket,\n    getPlayerSocket\n  \nclass TheFox extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        renderTargetRole: null,\n        endTurnConfirm: null,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        receiveTurn: false\n    }\n\n    playersToRevealBttn = (name, index, e) => {\n        if(window.confirm(\"Do you want to scent \" + name + \"?\")){\n            playersToReveal_arr.push(name)\n\n            if(playersToReveal_arr.length === 3){\n                let sendingData = {\n                    roomid: this.props.roomid,\n                    players: playersToReveal_arr\n                }\n\n                foxSocket.emit('RequestToScent', sendingData)\n\n                the_fox_target_bttn_ids.forEach((bttnId, index) => {\n                    document.getElementById(bttnId).disabled = true\n                })\n            }\n           \n            if(document.getElementById(\"the_fox_target_bttn_\" + name)){\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.remove(\"grayder-background\")\n                document.getElementById(\"the_fox_target_bttn_\" + name).classList.add(\"grayder-background\")\n            }\n\n        }\n    }\n\n    endTurnBttn = () => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'The fox'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n    }   \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            the_fox_target_bttn_ids.length = 0\n            playersToReveal_arr.length = 0\n\n            foxSocket = socketIOClient(serverUrl + 'the-fox')\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    //render UI\n                    this.setState({\n                        renderUI: <>\n                            <p>Choose 3 players to scent?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    //render UI\n                    this.setState({\n                        renderUI: <>\n                            <p>Choose 3 players to scent?</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            //The Fox's action\n            foxSocket.emit('GetCanUseAbility', this.props.roomid)\n\n            foxSocket.on('CanUseAbility', data => {\n                //if the fox loses the ability\n                if(!data){\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                    this.setState({\n                        renderTargetRole: <p>You lost your ability!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n\n            foxSocket.on('GetScentPlayers', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                this.setState({\n                    renderTargetRole: <p>Werewolves among <b>{playersToReveal_arr[0]}</b>, <b>{playersToReveal_arr[1]}</b>, <b>{playersToReveal_arr[2]}</b>? <b>{data ? \"YES\" : \"NO\"}</b></p>,\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                })\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        the_fox_target_bttn_ids.length = 0\n        playersToReveal_arr.length = 0\n\n        foxSocket.disconnect()\n        getNextTurnSocket.disconnect()\n        firstRoundSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            the_fox_target_bttn_ids.length = 0\n\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                players = []\n\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        if(player !== this.props.username){\n                            players.push(player)\n                            let id = \"the_fox_target_bttn_\" + player\n    \n                            the_fox_target_bttn_ids.push(id)\n    \n                            return(\n                                <button key = {player} id={id} type=\"button\" onClick={this.playersToRevealBttn.bind(this, player, index)}>{player}</button>\n                            )\n                        }\n\n                        return ''\n                    })\n                })\n            })\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                {this.state.renderTargetRole}\n                {this.state.endTurnConfirm}\n            </div>  \n            </>\n        )\n    }\n}   \n\nexport default TheFox","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport \"./ThePiedPiper.css\"\n\nimport serverUrl from '../../../../../serverUrl'\n\nlet piper_target_bttn_ids = [],\n    playersToCharm = [],\n    piperSocket,\n    firstRoundSocket,\n    getNextTurnSocket,\n    calledTurnSocket,\n    getCharmedSocket,\n    getPlayerSocket,\n    players = []\n\n\nclass ThePiedPiper extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        endTurnConfirm: null,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        playersToCharm: [],\n        receiveTurn: false\n    }\n\n    PlayersToCharm = (name, index, bttnId, e) => {\n        if(window.confirm(\"Do you want to charm \" + name + \"?\")){\n            playersToCharm.push(name)\n\n            document.getElementById(bttnId).disabled = true\n            document.getElementById(bttnId).classList.remove(\"piper-choose-player-button-disable\")\n            document.getElementById(bttnId).classList.add(\"piper-choose-player-button-disable\")\n\n            if(players.length >= 2){\n                if(playersToCharm.length === 2){\n                    this.setState({\n                        playersToCharm: playersToCharm.map(player => {\n                            return player\n                        })\n                    })\n    \n                    let sendingData = {\n                        roomid: this.props.roomid,\n                        playersToCharm: playersToCharm\n                    }\n    \n                    piperSocket.emit('RequestToCharmPlayers', sendingData)\n    \n                    playersToCharm.length = 0\n                }\n            }\n\n            else{\n                this.setState({\n                    playersToCharm: playersToCharm.map(player => {\n                        return player\n                    })\n                })\n\n                let sendingData = {\n                    roomid: this.props.roomid,\n                    playersToCharm: playersToCharm\n                }\n\n                piperSocket.emit('RequestToCharmPlayers', sendingData)\n\n                playersToCharm.length = 0\n            }\n        }\n    }\n\n    endTurnBttn = () => {\n        \n        \n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'The pied piper'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n    }  \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            playersToCharm.length = 0\n            piper_target_bttn_ids.length = 0\n            players.length = 0\n            \n            piperSocket = socketIOClient(serverUrl + 'piper')\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                            <p>Please charm 2 people</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                            <p>Please charm 2 people</p>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            //Piper's action\n            piperSocket.on('CharmedPlayers', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                this.setState({\n                    endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                })\n            })\n\n            //Handle changes of the total charmed players via a socket event (every character must have)\n            getCharmedSocket = socketIOClient(serverUrl + 'in-game')\n\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\n            getCharmedSocket.on('connect', () => {\n                getCharmedSocket.emit('JoinRoom', this.props.roomid)\n            })\n            \n            getCharmedSocket.emit('RequestToRetrieveCharmPlayers', this.props.roomid)\n\n            getCharmedSocket.on('GetListOfCharmed', (data) => {\n                data.forEach((player) => {\n                    if(document.getElementById(\"piper_target_bttn_\" + player)){\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.remove(\"piper-choose-player-button-disable\")\n                        document.getElementById(\"piper_target_bttn_\" + player).classList.add(\"piper-choose-player-button-disable\")\n                        document.getElementById(\"piper_target_bttn_\" + player).disabled = true\n                    }\n                })\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n\n        playersToCharm.length = 0\n        piper_target_bttn_ids.length = 0\n        players.length = 0\n\n        piperSocket.disconnect()\n        firstRoundSocket.disconnect()\n        getNextTurnSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getCharmedSocket.disconnect()\n        getPlayerSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            piper_target_bttn_ids.length = 0\n            playersToCharm.length = 0\n            players.length = 0\n\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        if(player !== this.props.username){\n                            let id = \"piper_target_bttn_\" + player\n    \n                            piper_target_bttn_ids.push(id)\n                            players.push(player)\n    \n                            return(\n                                <button key = {player} id={id} type=\"button\" onClick={this.PlayersToCharm.bind(this, player, index, id)}>{player}</button>\n                            )\n                        }\n\n                        return ''\n                    })\n                })\n                \n            })\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                <p>Charmed {this.state.playersToCharm.length === 2 ? <><b>{this.state.playersToCharm[0]}</b> and <b>{this.state.playersToCharm[1]}</b> </> : null}successfully!</p>\n                {this.state.endTurnConfirm}\n            </div> \n            </>\n        )\n    }\n}   \n\nexport default ThePiedPiper","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nlet protectTarget = '',\n    lastProtectedPlayer = '',\n    firstRoundSocket,\n    saviorSocket,\n    calledTurnSocket,\n    getNextTurnSocket,\n    getPlayerSocket\n\n\nclass TheSavior extends Component{\n    _isMounted = false\n\n    state = {\n        isDead: false,\n        isSilence: false,\n        renderPlayers: null,\n        renderUI: null,\n        renderSaviorAction: null,\n        protectTarget: '',\n        receiveTurn: false\n    }\n\n    ProtectPlayer = (name, e) => {\n        protectTarget = name\n\n        if(window.confirm(\"Do you want to protect \" + name + \"?\")){\n\n            let sendingData = {\n                roomid: this.props.roomid,\n                protectTarget: protectTarget\n            }\n\n            saviorSocket.emit('RequestToProtectPlayer', sendingData)\n\n            this.setState({protectTarget})\n        }\n    }\n\n    endTurnBttn = () => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'The savior'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n    }  \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            saviorSocket = socketIOClient(serverUrl + 'savior')\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\n\n                    saviorSocket.on('LastProtectedPlayer', data => {\n                        lastProtectedPlayer = data\n\n                        this.setState({\n                            renderUI: <>\n                                    <p>Who do you want to protect?</p>\n                            </>,\n                            receiveTurn: true\n                        })\n                    })\n                }\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    saviorSocket.emit('RequestToGetLastProtectedPlayer', this.props.roomid)\n\n                    saviorSocket.on('LastProtectedPlayer', data => {\n                        lastProtectedPlayer = data\n\n                        this.setState({\n                            renderUI: <>\n                                    <p>Who do you want to protect?</p>\n                            </>,\n                            receiveTurn: true\n                        })\n                    })\n                }\n            })\n\n            \n\n            //Savior's action\n            saviorSocket.on('ProtectedPlayer', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                if(data === 'ok'){\n                    \n\n                    this.setState({\n                        renderSaviorAction: <p><b>{this.state.protectTarget}</b> is protected!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n\n            \n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n\n        firstRoundSocket.disconnect()\n        saviorSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getNextTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        let id = \"savior_target_bttn_\" + player\n\n                        if(player === lastProtectedPlayer)\n                            return(\n                                <button key = {player} id={id} type=\"button\" className=\"grayder-background\" onClick={this.ProtectPlayer.bind(this, player)} disabled>{player}</button>\n                            )\n\n                        else\n                            return(\n                                <button key = {player} id={id} type=\"button\" onClick={this.ProtectPlayer.bind(this, player)}>{player}</button>\n                            )\n                    })\n                })\n                \n            })\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                {this.state.renderSaviorAction}\n                {this.state.endTurnConfirm}\n            </div>  \n            </>\n        )\n    }\n}   \n\nexport default TheSavior","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\n\nimport \"./Werewolves.css\"\n\nlet otherWolves = [],\n    targetChoice = '',\n    falseRole_arr = [],\n    target_button_id_arr = []\n\nlet otherSocket, //werewolves namespace\n    getPlayerSocket,\n    firstRoundSocket,\n    calledTurnSocket,\n    getNextTurnSocket\n\nclass Werewolves extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        renderLovers: null,\n        endTurnConfirm: null,\n        renderOtherChoices: null,\n        choseTarget: null,\n        renderCharmedPlayers: null,\n        renderFinalTarget: null,\n        renderOwnTarget: null,\n        receiveTurn: false,\n        renderFalsePickingPhase: null,\n        didChooseFalseRole: false,\n        false_role_button_id_arr: [],\n        false_role_werewolf_id_arr: [],\n\n    }\n\n    chooseTargetBttn = (name, e) => {\n        targetChoice = name\n\n        let sendingData = {\n            choseTarget: name,\n            wolfName: this.props.username,\n            roomid: this.props.roomid\n        }\n\n        otherSocket.emit(\"RequestMyChoice\", sendingData)\n\n        this.setState({choseTarget: <p>{targetChoice}</p>})\n    }\n\n    AgreeOnKill = (e) => {\n        if(window.confirm(\"Kill \" + targetChoice + \"?\")){\n            let sendingData = {\n                choseTarget: targetChoice,\n                roomid: this.props.roomid,\n                werewolf: this.props.username\n            }\n\n            otherSocket.emit(\"RequestToAgreeKill\", sendingData)\n            otherSocket.emit(\"RequestToNotifyOther\", sendingData)\n\n            this.setState({\n                renderOwnTarget: <p>Choice: <strong>{targetChoice}</strong></p>,\n                renderUI: <span>Waiting for other players ...</span>\n            })\n\n            \n            target_button_id_arr.forEach((id) => {\n                document.getElementById(id).disabled = true\n            })\n        }\n    }\n\n    chooseFalseRole = (falseRole, e) => {\n        if(window.confirm(\"choose false role: \" + falseRole + \"?\")){\n            let sendingData = {\n                falseRole: falseRole,\n                wolfName: this.props.username,\n                roomid: this.props.roomid\n            }\n    \n            otherSocket.emit(\"RequestFalseRoleChoice\", sendingData)\n\n            falseRole_arr.forEach((falseRole) => {\n                document.getElementById(\"false_role_bttn_\" + falseRole).disabled = true\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.remove(\"grayder-background\")\n                document.getElementById(\"false_role_bttn_\" + falseRole).classList.add(\"grayder-background\")\n            })\n        }\n    }\n\n    endTurnBttn = () => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'Werewolves',\n            player: this.props.username\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n\n        this.setState({endTurnConfirm: null})\n\n        this.setState({receiveTurn: false})\n    }  \n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                \n                if(data instanceof Array){\n                    data.every(player => {\n                        if(player === this.props.username){\n                            this.setState({receiveTurn: true})\n                            //render UI\n                            this.setState({\n                                renderUI: <>\n                                        <p>Who do you want to kill?</p>\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\n                                </>\n                            })\n                            return false\n                        }\n\n                        return true\n                    })\n                }\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data instanceof Array){\n                    data.every(player => {\n                        if(player === this.props.username){\n                            this.setState({receiveTurn: true})\n                            //render UI\n                            this.setState({\n                                renderUI: <>\n                                        <p>Who do you want to kill?</p>\n                                        <button className=\"agree-on-kill-button\" onClick={this.AgreeOnKill} id=\"agree-on-kill-button\">Agree on Kill</button>\n                                </>\n                            })\n                            return false\n                        }\n\n                        return true\n                    })\n                }\n                \n            })\n\n            /* <-----------------------------------------------> */\n            //Handle other werewolves choices && confirmation that the kill target is saved into database && final target\n            otherSocket = socketIOClient(serverUrl + 'werewolves')\n\n            //Join room for the werewolves namespace\n            otherSocket.on('connect', () => {\n                otherSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //confirmation\n            otherSocket.on('ConfirmKillRespond', data => {\n                if(data === \"all werewolves voted\"){\n\n                    let sendingData = {\n                        roomid: this.props.roomid,\n                        numberOfWerewolves: otherWolves.length + 1\n                    }\n                    otherSocket.emit('GetFalseRoles', sendingData)\n\n                    otherSocket.on('FalseRoles', data => {\n                        falseRole_arr = data\n                        let otherFalseRoles_arr = []\n\n                        otherSocket.emit('RequestToGetOtherFalseRoles', this.props.roomid)\n\n                        otherSocket.on('OtherFalseRoles', data => {\n                            otherFalseRoles_arr = data\n\n                            this.setState({ \n                                renderFalsePickingPhase: falseRole_arr.map((falseRole, index) => {\n                                    let bttnId = \"false_role_bttn_\" + falseRole,\n                                        werewolvesId = \"false_role_werewolf_\" + falseRole\n    \n                                    let domButton = <button id={bttnId} onClick={this.chooseFalseRole.bind(this, falseRole)}>{falseRole}</button>,\n                                        domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\n                                            \n    \n                                    otherFalseRoles_arr.every((otherFalseRole) => {\n                                        if(otherFalseRole.falseRole === falseRole){\n                                            domButton = <button id={bttnId} className=\"grayder-background\" disabled>{falseRole}</button>\n                                            domName = <div id={werewolvesId} className=\"in-game-render-players-container-werewolve-chosen\">{otherFalseRole.wolfName}</div>\n                                            return false\n                                        }\n                                        return true\n                                    })\n    \n                                    return(\n                                        <div key={falseRole} className=\"in-game-render-players-container-werewolve\">\n                                            {domButton}\n                                            {domName}\n                                        </div>\n                                    )\n                                })\n                            })\n                        })\n                    })\n\n                    otherSocket.on('FalseRoleChoice', data => {\n\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).disabled = true\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.remove(\"grayder-background\")\n                        document.getElementById(\"false_role_bttn_\" + data.falseRole).classList.add(\"grayder-background\")\n\n                        document.getElementById(\"false_role_werewolf_\" + data.falseRole).innerText = data.wolfName\n                    })\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                    this.setState({\n                        endTurnConfirm: <button className=\"werewolves-end-turn-button\" type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n\n            \n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n\n        otherSocket.disconnect()\n        getPlayerSocket.disconnect()\n        firstRoundSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getNextTurnSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn !== prevState.receiveTurn && this.state.receiveTurn){\n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                target_button_id_arr.length = 0\n\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        let id = \"werewolves_target_bttn_\" + player,\n                            werewolvesIconId = \"werewolves_icon_\" + player,\n                            playerHolderId = \"player_holder_\" + player\n                        \n                        target_button_id_arr.push(id)\n\n                        return(\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\" id={playerHolderId}>\n                                <button  id={id} type=\"button\" onClick={this.chooseTargetBttn.bind(this, player)}>{player}</button>\n                                <div id={werewolvesIconId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\n                            </div>\n                        )\n                    })\n                })\n\n                \n                \n\n                //Request to get other werewolves in this specific socket\n                otherSocket.emit('RequestToGetOtherWerewolves', this.props.roomid)\n\n                otherSocket.on('GetOtherWerewolves', data => {\n                    data.forEach((player) => {\n                        if(document.getElementById(\"werewolves_target_bttn_\" + player)){\n                            let wolfNode = document.getElementById(\"werewolves_target_bttn_\" + player)\n                            wolfNode.innerText += \" (Wolf)\"\n                            wolfNode.classList.remove(\"grayder-background\")\n                            wolfNode.classList.add(\"grayder-background\")\n                            wolfNode.disabled = true\n                        }\n                    })\n                })\n\n                \n\n                //others choices\n                otherSocket.on('OtherChoices', (data) => {\n                    //to advoid duplication\n                    let isContainWolfName = false\n                    otherWolves.length = 0\n                    \n                    otherWolves.forEach((wolf, index) => {\n                        if(wolf.wolfName === data.wolfName){\n                            wolf.choseTarget = data.choseTarget\n                            isContainWolfName = true\n                        }\n                    })\n\n                    if(!isContainWolfName){\n                        otherWolves.push(data)\n                    }\n\n                    otherWolves.forEach((choice) => {\n                        if(document.getElementById(\"werewolves_icon_\"+ choice.wolfName))\n                        document.getElementById(\"werewolves_icon_\"+ choice.wolfName).innerText = choice.choseTarget\n                    })\n                })\n                \n                /* <-----------------------------------------------> */\n                otherSocket.on('OtherNotified', data => {\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.remove(\"player-holder-grayer-background\")\n                    document.getElementById(\"player_holder_\" + data.werewolf).classList.add(\"player-holder-grayer-background\")\n                })\n\n                //Final target\n                otherSocket.on('ReceiveTheFinalTarget', data => {\n                    this.setState({\n                        renderFinalTarget: <p>Killed: <strong>{data}</strong></p>\n                    })\n                })\n            })\n        }\n\n\n        if(this.state.renderPlayers !== null && this.state.renderPlayers !== prevState.renderPlayers){\n            //Request to get other werewolves choices when the player arrives later\n            otherSocket.emit('RequestToGetOtherChoices', this.props.roomid)\n\n            otherSocket.on('GetOtherChoices', data => {\n                for(var key in data){\n                    if(data.hasOwnProperty(key)){\n                        if(document.getElementById(\"werewolves_icon_\" + key) && data[key].length > 0){\n                            document.getElementById(\"werewolves_icon_\"+ key).innerText = data[key]\n                        }\n                    }\n                }\n            })\n\n            //Request to get other werewolves kill decisions when the player arrives later\n            otherSocket.emit('RequestToGetOtherKillDecisions', this.props.roomid)\n\n            otherSocket.on('OtherKillDecisions', data => {\n                for(var key in data){\n                    if(data.hasOwnProperty(key)){\n                        if(document.getElementById(\"player_holder_\" + key) && data[key].length > 0){\n                            document.getElementById(\"player_holder_\" + key).classList.remove(\"player-holder-grayer-background\")\n                            document.getElementById(\"player_holder_\" + key).classList.add(\"player-holder-grayer-background\")\n                        }\n                    }\n                }\n            })\n        }\n    }\n\n    render(){\n        return(\n            <>  \n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                <div className=\"werewolves-announce-holder\">\n                    <div className=\"werewolves-annouce-words\">\n                        {this.state.renderOwnTarget}\n                        {this.state.renderFinalTarget}\n                    </div>\n                    {this.state.endTurnConfirm}\n                </div>\n                \n                <div className=\"werewolves-false-phase-holder\">\n                    {this.state.renderFalsePickingPhase}\n                </div>\n            </div> \n            </>\n        )\n    }\n}   \n\nexport default Werewolves","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport \"./Witch.css\"\nimport serverUrl from '../../../../../serverUrl'\n\nlet target = '',\n    protectId_buttons = [],\n    killId_buttons = [],\n    witchSocket,\n    firstRoundSocket,\n    calledTurnSocket,\n    getPlayerSocket,\n    getNextTurnSocket\n\n\nclass Witch extends Component{\n    _isMounted = false\n\n    state = {\n        renderPlayers: null,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        renderUI: null,\n        endTurnConfirm: null,\n        renderWitchAction: null,\n        target: '',\n        receiveTurn: false\n    }\n\n    KillPlayerBttn = (name, e) => {\n        target = name\n\n        if(window.confirm(\"Do you want to kill \" + name + \"?\")){\n            let sendingData = {\n                roomid: this.props.roomid,\n                target_kill: name\n            }\n            \n            witchSocket.emit('RequestToKillPlayer', sendingData)\n\n            this.setState({target})\n        }\n    }\n\n    ProtectPlayerBttn = (name, e) => {\n        target = name\n\n        if(window.confirm(\"Do you want to save \" + name + \"?\")){\n            let sendingData = {\n                roomid: this.props.roomid,\n                target_protect: name\n            }\n    \n            witchSocket.emit('RequestToProtectPlayer', sendingData)\n\n            this.setState({target})\n        }\n    }\n\n    endTurnBttn = () => {\n        \n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'Witch'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n        this.setState({endTurnConfirm: null})\n\n    } \n\n    UIEndTurnBttn = (e) => {\n        let sendingData = {\n            roomid: this.props.roomid,\n            role: 'Witch'\n        }\n\n        getNextTurnSocket.emit('RequestToGetNextTurn', sendingData)\n\n        this.setState({renderWitchAction: <p>You chose to end turn.</p>})\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n        document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n        document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n        document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n        document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n        \n        if(this._isMounted){\n            protectId_buttons.length = 0\n            killId_buttons.length = 0\n            \n            witchSocket = socketIOClient(serverUrl + 'witch')\n            getNextTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            /* <-----------------------------------------------> */\n\n            //Handle the first round (every character must have)\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            firstRoundSocket.on('connect', () => {\n                firstRoundSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            //Retrieve the 1st turn, if the player is the first to be called, then render its ui \n            firstRoundSocket.on('Retrieve1stTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                                <p>Choose your target to kill and to protect?</p>\n                                <button id=\"UI-end-turn-button\" className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the called turn (every character must have)\n            calledTurnSocket = socketIOClient(serverUrl + 'retrieve-next-turn')\n\n            calledTurnSocket.on('connect', () => {\n                calledTurnSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            calledTurnSocket.on('getNextTurn', data => {\n                if(data === this.props.username){\n                    this.setState({\n                        renderUI: <>\n                            <p>Choose your target to kill and to protect?</p>\n                            <button className=\"end-turn-witch-button\" onClick={this.UIEndTurnBttn}>End turn</button>\n                        </>,\n                        receiveTurn: true\n                    })\n                }\n            })\n            \n            //witch's action\n            witchSocket.on('KillPlayer', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                if(data === 'ok'){\n                    this.setState({\n                        renderWitchAction: <p><b>{this.state.target}</b> Killed!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n\n                else if(data === 'No Kill Potion Left'){\n                    this.setState({\n                        renderWitchAction: <p>No Kill Potion Left!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n\n            witchSocket.on('ProtectPlayer', (data) => {\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                if(data === 'ok'){\n                    this.setState({\n                        renderWitchAction: <p><b>{this.state.target}</b> Saved!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n\n                else if(data === 'No Heal Potion Left'){\n                    this.setState({\n                        renderWitchAction: <p>No Heal Potion Left!</p>,\n                        endTurnConfirm: <button type=\"button\" onClick={this.endTurnBttn}>End turn</button>\n                    })\n                }\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        protectId_buttons.length = 0\n        killId_buttons.length = 0\n\n        witchSocket.disconnect()\n        firstRoundSocket.disconnect()\n        calledTurnSocket.disconnect()\n        getPlayerSocket.disconnect()\n        getNextTurnSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.receiveTurn && this.state.receiveTurn !== prevState.receiveTurn){\n            protectId_buttons.length = 0\n            killId_buttons.length = 0\n            \n            // to display all the players that are from the room (every character must have)\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n\n                witchSocket.emit('RequestToRetrieveLeftAbilities', this.props.roomid)\n\n                witchSocket.on('LeftAbilities', leftAbilities => {\n                    this.setState({\n                        renderPlayers: data.map((player, index) => {\n                            let id = \"witch_target_bttn_\" + index,\n                                killId = \"witch_kill_bttn_\" + index,\n                                protectId = \"witch_protect_bttn\" + index\n                            protectId_buttons.push(protectId)\n                            killId_buttons.push(killId)\n                            \n                            return(\n                                <div key = {player}>\n                                    <p id={id}>{player}</p>\n                                    <div>\n                                        \n                                        {!leftAbilities.useKill && (player !== this.props.username) ? <button id={killId} onClick={this.KillPlayerBttn.bind(this, player)}>Kill</button>: null}\n                                        {!leftAbilities.useHeal ? <button id={protectId} onClick={this.ProtectPlayerBttn.bind(this, player)}>Protect</button> : null}\n                                    </div>\n                                </div>\n                            )\n                        })\n                    })\n                })\n            })\n        }\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                {this.state.renderWitchAction}\n                {this.state.endTurnConfirm}\n            </div>  \n            </>\n        )\n    }\n}   \n\nexport default Witch","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\nimport serverUrl from '../../../../../serverUrl'\nimport \"./RoundEnd.css\"\n\nlet setUpTime = 600, //10mins,\n    chosenPlayer = \"\",\n    timer,\n    round_end_target_bttn_id_arr = [],\n    minute, second\n\nlet roundEndSocket, //round-end namespace\n    getPlayerSocket \n\nexport default class RoundEnd extends Component{\n    _isMounted = false\n\n    state = {\n        renderUI: null,\n        renderPlayers: null,\n        renderChosenExecutedPlayer: null,\n        renderFinalExecutedPlayer: null,\n        endRoundConfirm: null,\n        timerEnds: false,\n        renderVotePlayerButton: null\n    }\n\n    VotePlayer = () => {\n        if(window.confirm(\"Hang \" + chosenPlayer + \"?\")){\n            let sendingData = {\n                chosenPlayer: chosenPlayer,\n                roomid: this.props.roomid,\n                player: this.props.username\n            }\n\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\n\n            this.setState({renderChosenExecutedPlayer: <p>Your Choice: <b>{chosenPlayer}</b></p>})\n\n            document.getElementById(\"vote-hanged-button\").style.display = \"none\"\n\n            round_end_target_bttn_id_arr.forEach(id => {\n                document.getElementById(id).disabled = true\n                document.getElementById(id).classList.remove('grayder-background')\n                document.getElementById(id).classList.add('grayder-background')\n            })\n        }\n    }\n\n    ChoosePlayer = (name, e) => {\n        chosenPlayer = name\n\n        let sendingData = {\n            chosenPlayer: chosenPlayer,\n            player: this.props.username,\n            roomid: this.props.roomid\n        }\n\n        roundEndSocket.emit(\"BroadCastMyChoice\", sendingData)\n\n        this.setState({\n            renderVotePlayerButton: <button id=\"vote-hanged-button\" className=\"vote-hanged-button\" onClick={this.VotePlayer}>Vote</button>\n        })\n    }\n\n    EndRound = () => {\n\n        let sendingData = {\n            roomid: this.props.roomid,\n            player: this.props.username\n        }\n\n        roundEndSocket.emit('RequestToEndRound', sendingData)\n\n        this.setState({endRoundConfirm: null})\n\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n            round_end_target_bttn_id_arr.length = 0\n\n            // to display all the players that are from the room (every character must have)\n            roundEndSocket = socketIOClient(serverUrl + 'round-end')\n\n            getPlayerSocket = socketIOClient(serverUrl + 'main-page')\n\n            getPlayerSocket.on('connect', () => {\n                getPlayerSocket.emit('JoinRoom', this.props.roomid)\n                getPlayerSocket.emit('RequestToGetPlayers', this.props.roomid)\n            })\n\n            getPlayerSocket.on('GetPlayers', data => {\n                round_end_target_bttn_id_arr.length = 0\n\n                this.setState({\n                    renderPlayers: data.map((player, index) => {\n                        \n                        let id = \"round_end_target_bttn_\" + player,\n                        roundEndPlayerId = \"round_end_\" + player\n                        \n                        round_end_target_bttn_id_arr.push(id)\n\n                        return(\n                            <div key = {player} className=\"in-game-render-players-container-werewolve\">\n                                {player === this.props.username ?\n                                    <button className=\"grayder-background\" id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)} disabled>{player}</button>\n                                    :\n                                    <button  id={id} type=\"button\" onClick={this.ChoosePlayer.bind(this, player)}>{player}</button>\n                                }\n                                <div id={roundEndPlayerId} className=\"in-game-render-players-container-werewolve-chosen\"></div>\n                            </div>\n                        )\n                    })\n                })\n            })\n            \n\n            roundEndSocket.on('connect', () => {\n                roundEndSocket.emit('JoinRoom', this.props.roomid)\n            })\n\n            \n            timer = setInterval(() => {\n                if(setUpTime < 1){\n                    this.setState({timerEnds: true})\n                    clearInterval(timer)\n                }\n                else{\n                    setUpTime -= 1\n                    minute = Math.floor(setUpTime/60)\n                    second = Math.floor(setUpTime % 60)\n\n                    if(second < 10)\n                        second = \"0\" + second\n                    else\n                        second = second\n\n                    this.setState({renderUI: \n                        <>\n                        <h3>Morning: {minute +  \":\" + second}</h3>\n                        {this.state.renderVotePlayerButton}\n                        </>\n                    })\n                }\n            }, 1000)\n\n            // For players who arrive later, they will catch up with current voting\n            roundEndSocket.emit('RequestToGetOtherChoices', this.props.roomid)\n\n            roundEndSocket.on('OtherKillDecisions', data => {\n                for(var key in data){\n                    if(data.hasOwnProperty(key)){\n                        if(document.getElementById(\"round_end_\"+ key)){\n                            document.getElementById(\"round_end_\"+ key).innerText = data[key]\n                        }\n                    }\n                }\n            })\n\n            roundEndSocket.on('GetOtherChoices', data => {\n                if(document.getElementById(\"round_end_\"+ data.player))\n                    document.getElementById(\"round_end_\"+ data.player).innerText = data.chosenPlayer\n                \n            })\n\n            roundEndSocket.on('BroadcastREDeadPlayers', data => {\n                clearInterval(timer)\n                if(document.getElementById(\"cupid-layer1\") && document.getElementById(\"cupid-layer2\")){\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer1\").classList.remove(\"in-game-cupid-layer-container-visible\")\n                    document.getElementById(\"cupid-layer2\").classList.remove(\"in-game-cupid-layer-container-visible\")\n\n                    document.getElementById(\"cupid-layer1\").classList.add(\"in-game-cupid-layer-container-invisible\")\n                    document.getElementById(\"cupid-layer2\").classList.add(\"in-game-cupid-layer-container-visible\")\n\n                    let playersGetHang = \"\"\n\n                    data.forEach((player) => playersGetHang += player + \" \")\n\n                    this.setState({\n                        renderFinalExecutedPlayer: <div><p>Final Executed: <strong>{playersGetHang}</strong></p></div>,\n                        endRoundConfirm: <button className=\"end-round-confirm-button\" onClick={this.EndRound}>End Morning</button>\n                    })\n                }\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if(this.state.renderPlayers !== prevState.renderPlayers){\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).disabled = true\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.remove(\"grayder-background\")\n            // document.getElementById(\"round_end_target_bttn_\" + this.props.username).classList.add(\"grayder-background\")\n        }\n\n        if(this.state.timerEnds !== prevState.timerEnds && this.state.timerEnds){\n            let sendingData = {\n                chosenPlayer: this.props.username,\n                roomid: this.props.roomid,\n                player: this.props.username\n            }\n\n            roundEndSocket.emit(\"RequestToHangPlayer\", sendingData)\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n        \n        round_end_target_bttn_id_arr.length = 0\n\n        roundEndSocket.disconnect()\n        getPlayerSocket.disconnect()\n\n        clearInterval(timer)\n    }\n\n    render(){\n        return(\n            <>  \n            <div className=\"in-game-cupid-layer1-container in-game-cupid-layer-container-visible\" id=\"cupid-layer1\">\n                    \n                <div className=\"in-game-render-ui-container\">\n                    {this.state.renderUI}\n                </div>\n                \n                <div className=\"in-game-render-players-container\">\n                    {this.state.renderPlayers}\n                </div>\n\n            </div>\n\n            <div className=\"in-game-cupid-layer2-container in-game-cupid-layer-container-invisible\" id=\"cupid-layer2\">\n                {this.state.renderChosenExecutedPlayer}\n                {this.state.renderFinalExecutedPlayer}\n                {this.state.endRoundConfirm}\n            </div> \n            </>\n        )\n    }\n}","import React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\n\nimport BearLeader from './RenderBasedOnRoles/BearLeader/BearLeader'\nimport Cupid from './RenderBasedOnRoles/Cupid/Cupid'\nimport Seer from './RenderBasedOnRoles/Seer/Seer'\nimport TheFox from './RenderBasedOnRoles/TheFox/TheFox'\nimport ThePiedPiper from './RenderBasedOnRoles/ThePiedPiper/ThePiedPiper'\nimport TheSavior from './RenderBasedOnRoles/TheSavior/TheSavior'\nimport Werewolves from './RenderBasedOnRoles/Werewolves/Werewolves'\nimport Witch from './RenderBasedOnRoles/Witch/Witch'\nimport RoundEnd from './RenderBasedOnRoles/RoundEnd/RoundEnd'\n\nimport \"./InGameRoom.css\"\n\nimport serverUrl from '../../../serverUrl'\n\nlet votingRoundSocket,\n    votedHangedPlayerSocket,\n    InGameSocket,\n    adminSocket,\n    firstRoundSocket,\n    roundEndsSocket\n\n\nclass InGameRoom extends Component{\n    _isMounted = false\n\n    state = {\n        renderPlayerRole: null,\n        timer: null,\n        renderRoleUI: null,\n        renderStartBttn: null,\n        startBttnClicked: false,\n        isAdmin: false,\n        renderLovers: null,\n        renderCharmedPlayers: null,\n        admin: '',\n        isDead: false,\n        roundEnds: false,\n        gameEnds: false,\n        sideWon: null,\n    }\n\n\n    startBttn = () => {\n\n        InGameSocket.emit('RequestToStartTheGame1stRound', this.props.match.params.roomid)\n\n        this.setState({\n            renderStartBttn: null\n        })\n    }\n\n    CloseTheGame = () => {\n        let sendingData = {\n            username: this.props.match.params.username,\n            roomid: this.props.match.params.roomid\n        }\n        InGameSocket.emit('RequestToCloseGame', sendingData)\n    }\n\n    componentWillMount(){\n\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n            //Get game info\n            InGameSocket = socketIOClient(serverUrl + 'in-game')\n\n            InGameSocket.on('connect', () => {\n                InGameSocket.emit('GetGameInfo', this.props.match.params.roomid)\n                InGameSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            InGameSocket.on('PlayerCloseGame', data => {\n                if(data === 'ok'){\n                    window.location = '/'\n                }\n            })\n\n            //Get admin to broadcast the request to join the game when start button is pressed and to retrieve the game info\n            //We need to shrink the number of times that all the players make requests to only one (only admin) so that\n            //the server does not need to receive so many redundant incoming requests\n\n            adminSocket = socketIOClient(serverUrl + 'get-admin', {\n                query: {\n                    roomid: this.props.match.params.roomid\n                }\n            })\n            \n            adminSocket.on('connect', () => {\n                adminSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            adminSocket.on('GetAdmin', data => {\n                this.setState({admin: data.admin})\n                if(this.props.match.params.username === data.admin){\n                    this.setState({\n                        renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>,\n                        isAdmin: true\n                    })\n                }\n            })\n\n            //when the start button is pressed (state is changed), get the game info (this is socket.io's event so that every listener\n            //in the room channel will receive the data whenever the event is triggered)\n            InGameSocket.on('RetrieveGameInfo', data => {\n                data.every((row) => {\n                    let found = false\n\n                    if(!row.special){\n                        row.player.every(name => {\n                            if(name === this.props.match.params.username){\n                                this.setState({\n                                    renderPlayerRole: row.name\n                                })\n\n                                if(row.name === \"Werewolves\"){\n                                    this.setState({\n                                        renderRoleUI: <Werewolves roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"Seer/ Fortune Teller\"){\n                                    this.setState({\n                                        renderRoleUI: <Seer roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"Cupid\"){\n                                    this.setState({\n                                        renderRoleUI: <Cupid roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"Witch\"){\n                                    this.setState({\n                                        renderRoleUI: <Witch roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"The savior\"){\n                                    this.setState({\n                                        renderRoleUI: <TheSavior roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"The pied piper\"){\n                                    this.setState({\n                                        renderRoleUI: <ThePiedPiper roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"The fox\"){\n                                    this.setState({\n                                        renderRoleUI: <TheFox roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n                                else if(row.name === \"The bear leader\"){\n                                    this.setState({\n                                        renderRoleUI: <BearLeader roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                    })\n                                }\n\n\n                                found = true\n\n                                return false\n                            }\n\n                            else{\n                                this.setState({\n                                    renderPlayerRole: \"Ordinary Townsfolk\"\n                                })\n                                return true\n                            }\n                        })\n                    }\n\n                    if(found){\n                        return false\n                    }\n\n                    else{\n                        return true\n                    }\n                })\n                \n            })\n\n            //Handle the first round\n            firstRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            /* <-----------------------------------------------> */\n\n            //Handle lover (every character must have)\n\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\n            \n            InGameSocket.on('RevealLovers', (data) => {\n                data.forEach((info, index) => {\n                    if(info.player === this.props.match.params.username){\n                        if(index === 0)\n                            this.setState({\n                                renderLovers: <p>You are now in love with {data[index+1].player} - {data[index+1].role}</p>\n                            })\n                        \n                        else{\n                            this.setState({\n                                renderLovers: <p>You are now in love with {data[index-1].player} - {data[index-1].role}</p>\n                            })\n                        }\n                    }\n                })\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle changes of the total charmed players via a socket event (every character must have)\n            //Every socket is unique, meaning if a socket joined a room doesnt mean other sockets existing in the same page will join that room\n            //Thus, we need to make every 'JoinRoom' emit event explicitly if we want that socket get response from a broadcast.\n            \n            InGameSocket.emit('RequestToRetrieveCharmPlayers', this.props.match.params.roomid)\n\n            InGameSocket.on('GetListOfCharmed', (data) => {\n                data.every((player) => {\n                    if(this.props.match.params.username === player){\n                        this.setState({\n                            renderCharmedPlayers: data.map((player, index) => {\n                                let key = 'charmed_' + index\n                                return(\n                                    <p key={key}>{player}</p>\n                                )\n                            })\n                        })\n\n                        return false\n                    }\n\n                    else\n                        return true\n                })\n            })\n\n            /* <-----------------------------------------------> */\n\n            \n            //Handle the end of a round meaning the night (every character must have) \n            roundEndsSocket = socketIOClient(serverUrl + 'retrieve-round-ends')\n            roundEndsSocket.on('connect', () => {\n                roundEndsSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            roundEndsSocket.on('RoundEnds', data => {\n                if(data.dead instanceof Array)\n                    data.dead.forEach((death, i) => {\n                        if(this.props.match.params.username === death){\n                            this.setState({isDead: true})\n                        }\n                    })\n                \n                this.setState({\n                    roundEnds: true\n                })\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the end of a voting turn meaning the morning (every character must have)\n            votingRoundSocket = socketIOClient(serverUrl + 'in-game')\n\n            votingRoundSocket.on('connect', () => {\n                votingRoundSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            votingRoundSocket.on('StartNewRound', data => {\n                if(data === \"Start new round\"){\n                    this.setState({\n                        roundEnds: false\n                    })\n\n                    if(this.state.isAdmin){\n                        this.setState({\n                            renderStartBttn: <button className= \"in-game-start-night-button\" type=\"button\" onClick={this.startBttn}>Start the night</button>\n                        })\n                    }\n                }\n            })\n\n            //Get hanged player\n            votedHangedPlayerSocket = socketIOClient(serverUrl + 'round-end')\n            votedHangedPlayerSocket.on('connect', () => {\n                votedHangedPlayerSocket.emit('JoinRoom', this.props.match.params.roomid)\n            })\n\n            votedHangedPlayerSocket.on('BroadcastREDeadPlayers', data => {\n                data.every((player) => {\n                    if(this.props.match.params.username === player){\n                        this.setState({isDead: true})\n                        return false\n                    }\n                    return true\n                })\n            })\n\n            /* <-----------------------------------------------> */\n\n            //Handle the end of the game (every character must have)\n            InGameSocket.on('GameEnds', data => {\n                if(data === \"Human won\"){\n                    this.setState({sideWon: 'Human'})\n                }\n                else if(data === \"Werewolves won\"){\n                    this.setState({sideWon: 'Werewolves'})\n                }\n                else if(data === \"Piper won\"){\n                    this.setState({sideWon: 'Piper'})\n                }\n                else if(data === \"Lovers won\")\n                    this.setState({sideWon: 'Piper'})\n\n                this.setState({\n                    gameEnds: true\n                })\n            })\n        }\n    }\n\n    componentWillUnmount(){\n        this._isMounted = false\n\n        votingRoundSocket.disconnect()\n        votedHangedPlayerSocket.disconnect()\n        InGameSocket.disconnect()\n        adminSocket.disconnect()\n        firstRoundSocket.disconnect()\n        roundEndsSocket.disconnect()\n    }\n\n    componentDidUpdate(prevProps, prevState){\n    }\n\n    ChooseLeftTab = (e) => {\n        //Display which left tab is highlighted\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"left-icon\").classList.add(\"tab-active\")\n\n\n        //transition to the left tab\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\n\n        document.getElementById(\"left-tab\").classList.add(\"in-game-user-tab-container-visible\")\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-right\")\n    }\n\n    ChooseMiddleTab = () => {\n        //Display which middle tab is highlighted\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"middle-icon\").classList.add(\"tab-active\")\n\n\n        //transition to the middle tab\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\n\n    }\n\n    ChooseRightTab = () => {\n        //Display which right tab is highlighted\n        document.getElementById(\"left-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"middle-icon\").classList.remove(\"tab-active\")\n        document.getElementById(\"right-icon\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"right-icon\").classList.add(\"tab-active\")\n\n        //transition to the right tab\n        document.getElementById(\"left-tab\").classList.remove(\"in-game-user-tab-container-visible\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-right\")\n        document.getElementById(\"middle-tab\").classList.remove(\"in-game-role-tab-container-invisible-move-left\")\n        document.getElementById(\"right-tab\").classList.remove(\"in-game-extra-info-tab-container-visible\")\n\n        document.getElementById(\"right-tab\").classList.add(\"in-game-extra-info-tab-container-visible\")\n        document.getElementById(\"middle-tab\").classList.add(\"in-game-role-tab-container-invisible-move-left\")\n    }\n\n    render(){\n        return(\n            <>\n            {/* Header for in game room */}\n            <div className=\"in-game-header-container\">\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseLeftTab} id=\"left-icon\">\n                    <i className=\"fas fa-user fa-lg\"></i>\n                </button>\n\n                <button className=\"in-game-header-item-holder tab-active\" onClick={this.ChooseMiddleTab} id=\"middle-icon\">\n                    <i className=\"fas fa-boxes fa-lg\"></i>\n\n                </button>\n                <button className=\"in-game-header-item-holder\" onClick={this.ChooseRightTab} id=\"right-icon\">\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\n                </button>\n            </div>\n\n            <div className=\"in-game-main-container\">\n                <div className=\"in-game-title\">\n                    <h2>In Game Room</h2>\n                </div>\n\n                {/* Main tab / middle tab*/}\n                <div className=\"in-game-role-tab-container\" id=\"middle-tab\">\n                    <div className=\"in-game-role-tab-title\">\n                        <h4>{this.state.renderPlayerRole}</h4>\n                    </div>\n\n                    {this.state.gameEnds ? \n                        <div className=\"in-game-role-tab-main\">\n                            <p>{this.state.sideWon} Won!</p>\n                            <button onClick={this.CloseTheGame}>Close</button>\n                        </div>\n                        :\n                        <>\n                        {!this.state.roundEnds ?\n                            <>\n                            {this.state.isDead ?\n                                <div className=\"in-game-role-tab-main\">\n                                    <p>You are dead</p>\n                                </div>\n                                :\n                                <div className=\"in-game-role-tab-main\">\n                                    {this.state.renderRoleUI}\n                                </div >\n                            }\n                            </>\n                        :\n                            <>\n                            {this.state.isDead ?\n                                <div className=\"in-game-role-tab-main\">\n                                    <p>You are dead</p>\n                                </div>\n    \n                                :\n    \n                                <div className=\"in-game-role-tab-main\">\n                                    <RoundEnd roomid = {this.props.match.params.roomid} username = {this.props.match.params.username}/>\n                                </div>\n                            }\n                            </>\n                        }\n                        </>\n                    }\n                    \n                    {this.state.renderStartBttn}\n                    \n                </div>\n\n                {/* User tab / left tab*/}\n                <div className = \"in-game-user-tab-container\" id=\"left-tab\">\n                    <div className= \"in-game-room-info-container\">\n                        <p>Room ID: {this.props.match.params.roomid} </p>\n                        <p>Admin: {this.state.admin}</p>\n                        <p>Name: {this.props.match.params.username}</p>\n                    </div>\n\n                    {/* History log container */}\n                    <div className= \"in-game-room-history-container\">\n                        \n                    </div>\n\n                    <div className=\"in-game-role-tab-start-end-button-container\">\n                    </div>\n                </div>\n\n\n                {/* Extra info tab / right tab */}\n                <div className = \"in-game-extra-info-tab-container\" id=\"right-tab\">\n                    <div className= \"in-game-lover-info\">\n                        {this.state.renderLovers}\n                    </div>\n\n                    <div className= \"in-game-charm-info\">\n                        <h4>List of Charmed Players</h4>\n                        {this.state.renderCharmedPlayers}\n                    </div>\n                </div>\n            </div>\n            </>\n        ) \n    }\n}\n\nexport default InGameRoom","import React, { Component } from 'react'\nimport './Welcome.css'\n\nclass Welcome extends Component{\n\n    state={}\n\n    playButton = () => {\n        this.props.history.push(`/login`)\n    }\n\n    componentDidMount(){\n    }\n\n    componentDidUpdate(prevProps, prevState){\n    }    \n\n    render(){\n        return(\n            <div className=\"Welcome-page-cover\">\n                <div className=\"Welcome-page-title\">\n                    <h2>The Werewolves of Millers Hollow</h2>\n                    <p className=\"small-title-description\">DMC's ver. 1.0.0</p>\n                    <b className=\"small-title-description\">Source Code: </b>  <a target=\"_blank\" className=\"small-title-description\" href=\"https://github.com/minhchinh97h/werewolf_client\">Client</a>  <a target=\"_blank\" className=\"small-title-description\" href=\"https://github.com/minhchinh97h/werewolf_server\">Server</a>\n                </div>\n\n                <div className=\"Welcome-page-button\">\n                    <button onClick={this.playButton}>\n                        Play\n                    </button>\n                </div>\n\n                <div className=\"welcome-bottom-link\">\n                    \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Welcome","let currentRoles = {\n    'Werewolves': 0,\n    'Ordinary Townsfolk': 0,\n    'Seer/ Fortune Teller': 0,\n    // 'Hunter': 0,\n    'Cupid': 0,\n    'Witch': 0,\n    // 'Little Girl': 0,\n    // 'Sheriff': 0,\n    // 'Thief': 0,\n    // 'The village Idiot': 0,\n    // 'The ancient': 0,\n    // 'The scapegoat': 0,\n    'The savior': 0,\n    'The pied piper': 0,\n    // 'The villager villager': 0,\n    // 'The two sisters': 0,\n    // 'The three brothers': 0,\n    // 'The knight with the rusty sword': 0,\n    'The fox': 0,\n    'The bear leader': 0,\n    // 'The devoted servant': 0,\n    // 'The wild child': 0,\n    // 'The dog wolf': 0\n}\n\nexport default currentRoles","// const serverUrl = \"http://10.0.0.6:3001/\"\n// const serverUrl = \"https://werewolves-of-millers-hollow.herokuapp.com/\"\n\nconst serverUrl = \"http://192.168.0.133::3001/\"\n\nexport default serverUrl ","import React, { Component } from 'react'\n\nimport currentRoles from '../../validation/currentRoles/currentRoles'\n\nimport serverUrl from '../../serverUrl'\nimport \"./Login.css\"\n\nconst uniqid = require('uniqid')\nconst axios = require('axios')\n\nclass Login extends Component{\n\n    state={}\n\n    newRoomButton = () => {\n        let roomid = uniqid()\n\n        let input_player_username_node = document.getElementById(\"input_player_username\")\n\n        if(input_player_username_node.value.length === 0){\n            input_player_username_node.placeholder = \"Please enter a name\"\n        }\n\n        else{\n            //Create a player with the input name in players collection and also a room with updated players info\n            axios({\n                method: 'post',\n                url: serverUrl + 'rooms/' + roomid + '/create-player-and-room',\n                data: {\n                    roomid: roomid,\n                    username: input_player_username_node.value,\n                    currentRoles: currentRoles\n                }\n            })\n            .then(res => {\n                if(res.data === \"ok\"){\n                    this.props.history.push(`/waiting-room/` + roomid + `/` + input_player_username_node.value)\n                }\n            })\n            .catch(err => console.log(err))\n        }\n    }\n\n\n    joinButton = () => {\n        let input_player_username_node = document.getElementById(\"input_player_username\"),\n            input_player_roomid_node = document.getElementById(\"input_player_roomid\")\n\n        if(input_player_username_node.value.length === 0){\n            input_player_username_node.placeholder = \"Please enter a name\"\n\n            if(input_player_roomid_node.value.length === 0){\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\n            }\n        }\n\n        else{\n            if(input_player_roomid_node.value.length === 0){\n                input_player_roomid_node.placeholder = \"Please enter a valid room Id\"\n            }\n\n            else{\n                //Check whether the room exists and whether the room contains the name\n                axios({\n                    method: 'post',\n                    url: serverUrl + 'rooms/' + input_player_roomid_node.value + '/get-room-check-username',\n                    data: {\n                        roomid: input_player_roomid_node.value,\n                        username: input_player_username_node.value\n                    }\n                })\n                .then(res => {\n                    if(res.data === \"ok\"){\n                        this.props.history.push(`/waiting-room/` + input_player_roomid_node.value + `/`  + input_player_username_node.value)\n                    }\n\n                    else if (res.data === \"username exists\"){\n                        input_player_username_node.placeholder = \"'\" + input_player_username_node.value + \"' already exists in \" + input_player_roomid_node.value\n                        input_player_username_node.value = \"\"\n                    }\n\n                    else {\n                        input_player_roomid_node.placeholder = \"'\" + input_player_roomid_node.value + \"' doesn't exist\"\n                        input_player_roomid_node.value = \"\"\n                    }\n                })\n                .catch(err => console.log(err))\n            }\n        }\n    }\n\n    componentDidMount(){\n    }\n\n    componentDidUpdate(prevProps, prevState){\n    }\n\n    componentWillUnmount(){\n    }\n\n    render(){\n        return(\n            <div className=\"Login-page-cover\">\n                <div className=\"Login-page-title\">\n                    <h2>Login Room</h2>\n                </div>\n\n                <div className=\"Login-page-body\">\n\n                    <input type=\"text\" id=\"input_player_username\" name=\"player_username\" placeholder=\"Name\"/>\n\n                    <input type=\"text\" id=\"input_player_roomid\" name=\"player_roomid\" placeholder=\"Room ID\"/>\n\n                    <button className=\"button-of-Login\" type=\"button\" onClick={this.joinButton}>join</button>\n\n                    <button className=\"button-of-Login create-new-room-button\" type=\"button\" onClick={this.newRoomButton}>Create a Room and Go</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Login","import React, { Component } from 'react';\nimport \"./Footer.css\"\n\nclass Footer extends Component{\n    render(){\n        return(\n            <div className=\"footer-container\">\n\n            </div>\n        )\n    }\n}\n\nexport default Footer","import React, { Component } from 'react'\n\nimport socketIOClient from 'socket.io-client'\nimport currentRoles from '../../../../validation/currentRoles/currentRoles'\nimport serverUrl from '../../../../serverUrl'\n\nimport \"./DisplayCards.css\"\n\nclass DisplayCards extends Component {\n    _isMounted = false\n\n    state = {\n        renderCards: null,\n        renderPressedCards: null,\n        isCardSelected: false,\n        selectedCards: null,\n        pressedCards: null,\n        currentRoles: null\n    }\n\n    //Used to leave one card out of the current chosen card collection\n    decreaseCardBttn = (name, e) => {\n        currentRoles[name] -= 1\n        \n        if(currentRoles[name] < 0 || currentRoles[name] === 0){\n            currentRoles[name] = 0\n            document.getElementById(name + \"-quantity\").innerText = \"\"\n        }\n        let name_array = [],\n            value_array = []\n\n        for(var key in currentRoles){\n            if(currentRoles.hasOwnProperty(key))\n            {\n                if(currentRoles[key] > 0){\n                    name_array.push(key)\n                    value_array.push(currentRoles[key])\n                }\n                    \n            }\n        }\n        \n        name_array.forEach((name, index) => {\n            let quantityId = name + \"-quantity\"\n            \n            if(value_array[index] === 0)\n                document.getElementById(quantityId).innerText = \"\"\n            else\n                document.getElementById(quantityId).innerText = \"x\" + value_array[index]\n        })\n\n        this.setState({\n            isCardSelected: true\n        })\n    }\n\n    //Used to choose a card and add it to the chosen card collection\n    chooseCardBttn = (name, e) => {\n        currentRoles[name] += 1\n        \n        let name_array = [],\n            value_array = []\n\n        for(var key in currentRoles){\n            if(currentRoles.hasOwnProperty(key))\n            {\n                if(currentRoles[key] > 0){\n                    name_array.push(key)\n                    value_array.push(currentRoles[key])\n                }\n                    \n            }\n        }\n        \n        name_array.forEach((name, index) => {\n            let quantityId = name + \"-quantity\"\n\n            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\n        })\n\n        this.setState({\n            isCardSelected: true\n        })\n    }\n\n    //Used to submit the card collection to database\n    submitCardsBttn = (e) => {\n        let sentData = {\n            roomid: this.props.roomid,\n            currentRoles: currentRoles\n        }\n\n        const socket = socketIOClient(serverUrl + 'submit-selected-cards')\n\n        socket.on('connect', () => {\n            socket.emit('JoinRoom', sentData)\n        })\n    }\n\n    componentDidMount(){\n        this._isMounted = true\n\n        if(this._isMounted){\n\n            const cardSocket = socketIOClient(serverUrl + 'get-cards')\n\n            cardSocket.on('GetCards', data => {\n                this.setState({\n                    renderCards: data.map( (card, index) => {\n                        let cardId = \"card \" + index,\n                            quantityId = card.name + \"-quantity\"\n                        return(\n                            <div key = {card.name} className=\"card-item\">\n                                <button className =\"card-button\" type='button' onClick={this.chooseCardBttn.bind(this, card.name)} id={cardId}>{card.name}</button>\n                                <div className=\"card-quantity-holder\">\n                                    <p id={quantityId}></p>\n                                </div> \n                                <i className=\"fas fa-minus-square minus-sign fa-sm\" onClick={this.decreaseCardBttn.bind(this, card.name)}></i>\n                            </div>\n                        )\n                    })\n                })\n\n                //To make sure DOM elements (card-item) show up when below socket's data arrives.\n                const socket = socketIOClient(serverUrl + 'get-current-roles')\n\n                socket.on('connect', () => {\n                    socket.emit('JoinRoom', this.props.roomid)\n                })\n\n                socket.on('GetSelectedCards', data => {\n                    \n                    if(data !== null && this._isMounted){\n                        for(var key in data){\n                            if(data.hasOwnProperty(key)){\n                                currentRoles[key] = data[key]\n                            }\n                        }\n\n                        let name_array = [],\n                        value_array = []\n\n                        for(var k in currentRoles){\n                            if(currentRoles.hasOwnProperty(k))\n                            {\n                                if(currentRoles[k] > 0){\n                                    name_array.push(k)\n                                    value_array.push(currentRoles[k])\n                                }\n                                    \n                            }\n                        }\n                        \n                        name_array.forEach((name, index) => {\n                            let quantityId = name + \"-quantity\"\n                \n                            document.getElementById(quantityId).innerText = \"x\" + value_array[index]\n                        })\n\n                    }\n                \n                })\n            })\n\n                \n        }\n    }\n    \n    componentWillUnmount(){\n        this._isMounted = false\n    }\n\n    render(){\n        return(\n            <>\n            <div className=\"admin-choose-cards-and-submit-button-container\" id=\"display-cards-container\">\n                <div className = \"display-cards-container\">\n                    {this.state.renderCards}\n                    \n                    \n                </div>\n                <div className=\"submit-card-collection-button-holder\">\n                        {this.state.isCardSelected ?\n\n                                <button type=\"button\" onClick={this.submitCardsBttn.bind(this)}>submit</button>\n                                :\n                                null\n                        }\n                </div>\n            </div>\n            \n            </>\n        )\n    }\n}\n\n\nexport default DisplayCards","import React, { Component } from 'react';\nimport \"./Header.css\"\n\n\nclass Header extends Component{\n\n    ChooseUserTab = (e) => {\n        //Display which user tab is highlighted\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"user-tab-button\").classList.add(\"tab-active\")\n\n\n        //transition to user tab, card collection tab of Admin page is automatically shown at first (firstly visible, others are invisible)\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\n\n        document.getElementById(\"room-information-container\").classList.add(\"room-information-container-visible\")\n        document.getElementById(\"display-cards-container\").classList.add(\"display-cards-container-invisible\")\n    }\n\n    ChooseCardCollectionTab = () => {\n        //Display which card collection tab is highlighted\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"card-collection-button\").classList.add(\"tab-active\")\n\n\n        //transition to card collection tab\n        document.getElementById(\"room-information-container\").classList.remove(\"room-information-container-visible\")\n        document.getElementById(\"display-cards-container\").classList.remove(\"display-cards-container-invisible\")\n    }\n\n    ChooseFinalTab = () => {\n        //Display which final tab is highlighted\n        document.getElementById(\"user-tab-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"card-collection-button\").classList.remove(\"tab-active\")\n        document.getElementById(\"final-tab-button\").classList.remove(\"tab-active\")\n\n        document.getElementById(\"final-tab-button\").classList.add(\"tab-active\")\n    }\n\n    componentDidMount(){\n\n    }\n\n    render(){\n        return(\n            <div className=\"header-container header-container-admin\" id=\"header\">\n                <button className=\"header-item-holder\" onClick={this.ChooseUserTab} id=\"user-tab-button\">\n                    <i className=\"fas fa-user fa-lg\"></i>\n                </button>\n                <button className=\"header-item-holder tab-active\" onClick={this.ChooseCardCollectionTab} id=\"card-collection-button\">\n                    <i className=\"fas fa-boxes fa-lg\"></i>\n\n                </button>\n                <button className=\"header-item-holder\" onClick={this.ChooseFinalTab} id=\"final-tab-button\">\n                    <i className=\"fas fa-clipboard-list fa-lg\"></i>\n                </button>\n                \n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component } from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom'\nimport Welcome from './components/Welcome/Welcome'\nimport Login from './components/Login/Login'\nimport Footer from './components/Footer/Footer'\nimport {WaitingRoom} from './components/MainPage/WaitingRoom/WaitingRoom'\nimport InGameRoom from './components/MainPage/InGameRoom/InGameRoom'\n\nclass App extends Component {\n  \n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Welcome}/>\n        <Route path=\"/login\" component={Login} />\n        <Route exact path=\"/waiting-room/:roomid/:username\" component = {WaitingRoom} />\n        <Route exact path=\"/in-game-room/:roomid/:username\" component = {InGameRoom} />\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport { CookiesProvider } from 'react-cookie'\n\nReactDOM.render(\n<BrowserRouter>\n    <CookiesProvider>\n        <App />\n    </CookiesProvider>\n</BrowserRouter>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}